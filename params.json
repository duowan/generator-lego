{"name":"Generator-Lego","tagline":"F2E workflow, base on yeoman & gulp","body":"# generator-lego\r\n\r\n> *generator-lego* 基于gulp的前端工作流\r\n\r\n\r\n### <a name=\"top\"></a>目录\r\n* [主要功能](#intro)\r\n* [环境准备](#sys-env)\r\n* [快速开始](#quick-start)\r\n* [文件结构](#file-tree)\r\n* [功能说明](#func-dtls)\r\n* [任务说明](#task-dtls)\r\n* [Demo](#show-case)\r\n* [已知问题](#known-issues)\r\n* [License](#license)\r\n\r\n\r\n### <a name=\"intro\"></a>主要功能 [[⬆]](#top)\r\n这是一个帮助前端开发工程师简化工作的工具，它的主要功能是：\r\n\r\n* WebServer\r\n* 监听匹配文件的变化自动刷新浏览器\r\n* 初始化项目目录结构及文件\r\n* 自动编译SASS\r\n* 自动补全CSS3浏览器前缀\r\n* 支持ejs模板\r\n* [多雪碧图合并、2x、3x拼图][4]\r\n* 压缩图片\r\n* 发布到svn\r\n* zip打包\r\n\r\n\r\n### <a name=\"sys-env\"></a>环境准备 [[⬆]](#top)\r\n1. Node 环境：支持到 [Node v0.12.9][8]；若已安装高版本的Node，[请使用 nvm 切换至 0.10.x 或 0.12.x](#known-issues) 再执行下面步骤\r\n2. Yo、Gulp 环境 ：`npm install -g yo gulp`\r\n3. Subversion Command-Line (Mac已自带，Win如未安装可[点击下载][7])\r\n\r\n\r\n### <a name=\"quick-start\"></a>快速开始 [[⬆]](#top)\r\n提供以下2种获取方式：\t\r\n\r\n1. npm\r\n\t* `npm install -g generator-lego`\r\n\t* 在空目录执行 `yo lego` 初始化项目\r\n\r\n2. Clone the repo\r\n\t* 点击右边【clone in desktop】克隆到本地\r\n\t* 在克隆目录执行 `npm link` 链接到全局模块的位置\r\n\t* 在空目录执行 `yo lego` 初始化项目\r\n\r\n\r\n### <a name=\"file-tree\"></a>文件结构 [[⬆]](#top)\r\n`generator-lego` 初始化和执行任务涉及的文件结构：\r\n\r\n```\r\nyourProj/\r\n│\r\n├── package.json                // 项目依赖定义\r\n├── gulp.js                     // gulp配置任务入口\r\n├── tasks/ \t\t\t\t\t\t// gulp任务流，开发、构建、发布等\r\n│\r\n├── node_modules    \t\t\t  // `npm install` 拉取依赖包\r\n│\r\n├── src/                        // 开发目录\r\n│    ├── css/                   \r\n│    │   └── global.css         // 经过sass编译后的出口css文件\r\n│    ├── sass/                  // sass源文件\r\n│    ├── img/                   // 仅 Copy 不做操作\r\n│    │   └── slice/             // 切片文件夹，拼雪碧图用\r\n│    ├── js/                    // 仅 Copy 不做操作\r\n│    ├── tpl/                   // 仅 Copy 不做操作，用来存放ejs模板\r\n│    └── _index.html             \r\n│    \r\n└── dest/                       // 发布目录，执行 `gulp build` 生成\r\n    ├── css/                    \r\n    │   └── global.css\r\n    ├── img/                   \r\n    ├── js/                     \r\n    └── index.html               \r\n```\r\n\r\n### <a name=\"func-dtls\"></a>功能说明 [[⬆]](#top)\r\n#### ejs模板\r\n* 参与ejs编译的文件匹配路径`src/tpl/*.ejs`\r\n* 文件夹`src/tpl`可内建子文件夹，存放被引用的代码片段；子文件夹不会编译出html文件\r\n* 开发阶段，编译后生成的html文件，位于`src/`；如已有同名html文件，覆盖之\r\n* 构建阶段，编译后生成的html文件，位于`dest/`；同样覆盖同名html文件\r\n\r\n#### 雪碧图合并\r\n* 切片放在文件夹`src/slice/`，该文件夹可继续创建子文件夹存放切片\r\n* 需要合并的切片，使用`background-image:url()`引入切片样式，不要使用`background`属性的缩写\r\n* 详细说明移步 [多雪碧图合并、2x、3x拼图][4]\r\n\r\n\r\n### <a name=\"task-dtls\"></a>任务说明 [[⬆]](#top)\r\n#### 初始化项目\r\n* 执行`yo lego`，按如下规则初始化\r\n\t* 如当前文件夹没有`node_modules`，则创建软连接\r\n\t* 如当前文件夹存在`src`，则退出\r\n\t* 否则，继续执行初始化过程\r\n\r\n#### 开发\r\n* `gulp` 创建一个链接，自动检测`src`文件夹下的静态文件，自动刷新。支持sass、ejs编译。\r\n\r\n#### 构建\r\n* `gulp build` 将静态文件压缩到 `dest/`，该阶段会执行雪碧图合并、ejs编译。\r\n\r\n#### 发布\r\n* `gulp publish` 将 `dest/`静态文件上传到svn。\r\n\r\n#### 打包\r\n* `gulp zip` 将源码和构建后代码压缩成一个zip包。\r\n\r\n#### 检测\r\n* `gulp hint` 检测`src/`文件下的语法。\r\n\r\n\r\n#### 其他命令参数\r\n1. `gulp [-p <port>] [-q] [-w <width-of-design-page>]`\r\n\t* `-p` port 的简写，给webserver指定端口号；此参数需要指定参数值作为端口号，如：8080\r\n\t* `-q` qrcode 的简写，指定该参数生成 url的二维码\r\n\t* `-w` 指设计稿像素宽度，默认值 `750`，用来生成生成rem单位的切片语法；如不指定`-w`将生成px单位的语法\r\n\r\n2. `gulp build [-p <port>] [-q] [-w <width-of-design-page>]`\r\n\t* `-p` 指port，给webserver指定端口号；此参数需要指定参数值作为端口号，如：8080\r\n\t* `-q` 指qrcode，指定该参数生成 url的二维码\r\n\t* `-w` 指设计稿像素宽度，默认值 `750`，将使用rem单位更新定位数据；如不指定`-w`将使用px单位更新定位数据\r\n\r\n3. `gulp publish [-m <message>]`\r\n\t* `-m` svn提交日记\r\n\r\n### <a name=\"show-case\"></a>Demo [[⬆]](#top)\r\n![showcase01](https://cloud.githubusercontent.com/assets/1762523/4558145/146cf2e4-4edc-11e4-8e21-9d408776a14d.gif)\r\n\r\n### <a name=\"known-issues\"></a>已知问题 [[⬆]](#top)\r\n1. 管理 node版本\r\n\t* mac用户使用[nvm][9]\r\n\t\t* 安装nvm：`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.1/install.sh | bash` \r\n\t\t* 激活nvm：`[[ -s $HOME/.nvm/nvm.sh ]] && . $HOME/.nvm/nvm.sh`，并加到 `~/.bashrc`、`~/.profile`或`~/.zshrc`配置中\r\n\t\t* node的安装和切换见官方文档\r\n\t* win 用户使用[nvm-windows][10]\r\n\t\r\n\r\n\r\n请使用Mac请使用[nvm] *默认此步骤已完成*  （Mac建议使用 [Brew] 安装 [Node.js]） \r\n\r\n\r\n### <a name=\"license\"></a>License [[⬆]](#top)\r\nReleased under [MIT] LICENSE\r\n\r\n\r\n---\r\n[Brew]: http://brew.sh/\r\n[Node.js]: http://nodejs.org/\r\n[yeoman]:http://yeoman.io/\r\n[gulp]:https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md#getting-started\r\n[MIT]: http://rem.mit-license.org/\r\n[1]: http://www.graphicsmagick.org/download.html\r\n[2]: http://phantomjs.org/download.html\r\n[3]: https://github.com/hzlzh/f2e-workflow/issues/6\r\n[4]: https://github.com/twlk28/multi-sprite\r\n[5]: https://github.com/sass/node-sass/issues/933\r\n[6]: https://github.com/sass/node-sass/pull/943\r\n[7]: http://pan.baidu.com/s/1gdrQ7Px\r\n[8]: http://nodejs.org/en/blog/release/v0.12.9/\r\n[9]: https://github.com/creationix/nvm\r\n[10]: https://github.com/coreybutler/nvm-windows\r\n","google":"UA-8307426-20","note":"Don't delete this file! It's used internally to help with page regeneration."}